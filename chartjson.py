#!/usr/bin/env python3
# Description: Loops through json generated by maps2json to build json for charts
# Author: Tyler "-z-" Mulligan

import json, copy, datetime, math
from collections import OrderedDict
from operator import itemgetter

def main():
    f = open('./data/maps.json') 
    data = f.read()
    maps_json = json.loads(data)['data']

    filesizes = ['bytes']
    mapinfos = 0
    mapshots = 0
    maps = 0
    radars = 0
    waypoints = 0
    licenses = 0

    # Generate OrderedDict for filesize distribution
    filesize_dist_keys = ['<1MB']
    for i in range(1,31):
         filesize_dist_keys.append(str(i) + "MB")
    filesize_dist_keys.append('30MB+')
    filesize_dist = OrderedDict([(k, 0) for k in filesize_dist_keys])

    # Generat dict for maps by year
    years = list(range(1999,2016))
    maps_by_year = dict.fromkeys(years, 0)

    gametypes_combined = []

    total = 0
    for m in maps_json:
        total += 1

        # Pie chart data        
        if m['mapinfo']:
            mapinfos += 1
        if m['mapshot']:
            mapshots += 1
        if m['map']:
            maps += 1
        if m['radar']:
            radars += 1
        if m['waypoints']:
            waypoints += 1
        if m['license']:
            licenses += 1

        # Filesize distribution (stupid hacky way - please help me rewrite)
        filesize = convertSize(m['filesize'])
        if (filesize.find('KB') > -1):
            filesize_dist['<1MB'] += 1
        elif (filesize.find('MB') > -1):
            fsi = filesize.replace('MB','').strip()
            if int(fsi) > 30:
                filesize_dist['30MB+'] += 1
            else:
                filesize_dist[filesize.strip()] += 1

        # Maps over time data
        dt = datetime.datetime.fromtimestamp(m['date'])
        maps_by_year[dt.year] += 1

        # Get all gametypes
        if len(m['gametypes']):
            gametypes_combined.extend(m['gametypes'])
    
    # Gametype distribution    
    gametypes_set = set(gametypes_combined)
    gametypes_dist = dict.fromkeys(gametypes_set, 0)
    gametypes_dist.pop('', None) # someone defined an empty gametype
    for m in maps_json:
        if len(m['gametypes']):
            for g in m['gametypes']:
                if g != '': # handle that empty gametype
                    gametypes_dist[g] += 1

    # Pie Charts
    tchart = { 'bindto': '', 'data': { 'columns': [ ['yes'], ['no'] ], 'type': 'pie' } }

    c1 = copy.deepcopy(tchart)
    c1['bindto'] = '#chart-mapinfos'
    c1['data']['columns'][0].append(mapinfos)
    c1['data']['columns'][1].append(total - mapinfos)

    c2 = copy.deepcopy(tchart)
    c2['bindto'] = '#chart-mapshots'
    c2['data']['columns'][0].append(mapshots)
    c2['data']['columns'][1].append(total - mapshots)

    c3 = copy.deepcopy(tchart)
    c3['bindto'] = '#chart-maps'
    c3['data']['columns'][0].append(maps)
    c3['data']['columns'][1].append(total - maps)

    c4 = copy.deepcopy(tchart)
    c4['bindto'] = '#chart-radars'
    c4['data']['columns'][0].append(radars)
    c4['data']['columns'][1].append(total - radars)

    c5 = copy.deepcopy(tchart)
    c5['bindto'] = '#chart-waypoints'
    c5['data']['columns'][0].append(waypoints)
    c5['data']['columns'][1].append(total - waypoints)

    c6 = copy.deepcopy(tchart)
    c6['bindto'] = '#chart-licenses'
    c6['data']['columns'][0].append(licenses)
    c6['data']['columns'][1].append(total - licenses)

    # Bar (filesize distribution)
    c7 = { 'bindto': '', 'data': { 'x': 'x', 'json': { }, 'type': 'bar' },
           'axis': { 'x': { 'type': 'category' } } }
    c7['bindto'] = '#chart-filesizes'
    c7['data']['json']["x"] = list(filesize_dist.keys())
    c7['data']['json']["size"] = list(filesize_dist.values())

    # Line (maps over time)
    c8 = { 'bindto': '', 'data': { 'x': 'x', 'json': { }, 'type': 'line' },
           'axis': { 'x': { 'type': 'indexed' } } }
    c8['bindto'] = '#chart-mapsbyyear'
    c8['data']['json']['x'] = list(maps_by_year.keys())
    c8['data']['json']['maps'] = list(maps_by_year.values())

    # Donut (gametypes)
    c9 = { 'bindto': '', 'data': { 'json': { }, 'type': 'donut' } }
    c9['bindto'] = '#chart-gametypes'
    gametypes_sorted = OrderedDict(sorted(gametypes_dist.items(), key=itemgetter(1), reverse=True))
    c9['data']['json'] = gametypes_sorted

    charts = { 
                'mapinfos': c1,
                'mapshots': c2,
                'maps': c3,
                'radars': c4,
                'waypoints': c5,
                'licenses': c6,
                'filesizes': c7,
                'mapsbyyear': c8,
                'gametypes': c9
             }

    fo = open('data/charts.json', 'w')
    fo.write(json.dumps(charts))
    fo.close()

def convertSize(num):
    for x in ['B','KB','MB','GB']:
        if num < 1024.0:
            return "%3.1d%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')

if __name__ == "__main__":
    main()
